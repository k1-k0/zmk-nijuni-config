// Copyright (c) 2024 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


&sk {
    release-after-ms = <2000>;
    quick-release;
};



/ {
    keymap {
        compatible = "zmk,keymap";

        qwe {
            bindings = <
&kp BSLH   &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y      &kp U  &kp I      &kp O    &kp APOS  &kp FSLH
&kp GRAVE  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H      &kp J  &kp K      &kp L    &kp P     &kp MINUS
&kp RBKT   &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N      &kp M  &kp COMMA  &kp DOT  &kp SEMI  &kp LBKT
                         &mo 4  &mo 1  &kp SPACE    &kp LSHFT  &mo 2  &mo 3
            >;
        };

        nav {
            bindings = <
&trans  &trans    &kp CAPS  &key_repeat  &caps_word  &kp ESC      &kp ESC    &kp HOME  &kp UP         &kp END    &kp PG_UP  &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL    &sk LSHFT   &kp ENTER    &kp ENTER  &kp LEFT  &kp DOWN       &kp RIGHT  &kp PG_DN  &trans
&trans  &trans    &trans    &kp DEL      &trans      &kp TAB      &kp TAB    &trans    &kp BACKSPACE  &trans     &kp PSCRN  &trans
                            &trans       &trans      &trans       &trans     &trans    &trans
            >;
        };

        sym {
            bindings = <
&trans  &trans     &kp AMPS  &kp STAR     &kp LPAR   &kp RPAR     &kp QMARK  &kp LBRC   &kp RBRC   &trans    &trans    &trans
&trans  &kp EQUAL  &kp DLLR  &kp PERCENT  &kp CARET  &kp MINUS    &kp TILDE  &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI  &trans
&trans  &kp PLUS   &kp EXCL  &kp AT       &kp HASH   &kp UNDER    &kp PIPE   &kp LBKT   &kp RBKT   &kp LPAR  &kp RPAR  &trans
                             &trans       &trans     &trans       &trans     &trans     &trans
            >;
        };

        num {
            bindings = <
&trans  &kp KP_DIVIDE    &kp N7  &kp N8  &kp N9  &kp KP_PLUS     &trans          &trans     &trans        &trans      &trans    &trans
&trans  &kp KP_ASTERISK  &kp N4  &kp N5  &kp N6  &kp KP_MINUS    &kp KP_ENTER    &sk RSHFT  &sk RCTRL     &sk RALT    &sk RGUI  &trans
&trans  &kp KP_EQUAL     &kp N1  &kp N2  &kp N3  &kp N0          &kp KP_NUMLOCK  &kp BSPC   &kp KP_COMMA  &kp KP_DOT  &trans    &trans
                                 &trans  &trans  &trans          &trans          &trans     &trans
            >;
        };

        fun {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans     &kp F12  &kp F7  &kp F8  &kp F9  &kp PAUSE_BREAK  &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &kp INS    &kp F11  &kp F4  &kp F5  &kp F6  &kp PSCRN        &trans
&trans  &trans    &trans    &trans     &trans     &trans     &kp F10  &kp F1  &kp F2  &kp F3  &kp SCROLLLOCK   &trans
                            &trans     &trans     &trans     &trans   &trans  &trans
            >;
        };

        med {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans    &kp C_BRI_DEC  &kp C_VOL_UP  &kp C_BRI_UP  &trans     &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans    &kp C_PP  &kp C_PREV     &kp C_VOL_DN  &kp C_NEXT    &kp PSCRN  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans    &trans         &kp C_MUTE    &trans        &trans     &trans
                            &trans     &trans     &trans    &trans    &trans         &trans
            >;
        };

        ble {
            bindings = <
&trans  &bt BT_CLR_ALL  &trans        &trans        &trans        &bt BT_CLR      &bt BT_CLR    &trans        &trans        &trans        &bt BT_CLR_ALL  &trans
&trans  &bt BT_SEL 4    &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans
&trans  &trans          &out OUT_TOG  &out OUT_USB  &out OUT_BLE  &trans          &trans        &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &trans          &trans
                                      &trans        &trans        &trans          &trans        &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        mo_med {
            if-layers = <1 2>;
            then-layer = <5>;
        };

        mo_ble {
            if-layers = <3 4>;
            then-layer = <6>;
        };
    };
};
