/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER 1
#define RAISE 2
#define FUNCTIONAL 3

/* #define FNC_TAB &lt FUNC TAB */
/* #define LWR_SPC &lt LOWER SPACE */
/* #define RSE_RET &lt RAISE RET */

/* #define RSE_ESC  &lt RAISE ESC */
/* #define LWR_BSPC &lt LOWER BSPC */
/* #define FNC_DEL  &lt FUNC DEL */

/* // Home row keys (default) */
/* #define HM_A &hm LGUI A */
/* #define HM_S &hm LALT S */
/* #define HM_D &hm LCTRL D */
/* #define HM_F &hm LSHFT F */
/* #define HM_J &hm RSHFT J */
/* #define HM_K &hm RCTRL K */
/* #define HM_L &hm RALT L */
/* #define HM_SEMI &hm RGUI SEMI */

/* // Home row keys (lower) */
/* #define HML_STAR &hm LGUI ASTRK */
/* #define HML_4 &hm LALT N4 */
/* #define HML_5 &hm LCTRL N5 */
/* #define HML_6 &hm LSHFT N6 */
/* #define HML_DOWN &hm RSHFT DOWN */
/* #define HML_UP &hm RCTRL UP */
/* #define HML_RIGHT &hm RALT RIGHT */
/* #define HML_APP &hm RGUI APP */

/* // Home row keys (raise) */
/* #define HMR_STAR &hm LGUI ASTRK */
/* #define HMR_DLLR &hm LALT DLLR */
/* #define HMR_PRCNT &hm LCTRL PRCNT */
/* #define HMR_CARET &hm LSHFT CARET */
/* #define HMR_LPAR &hm RSHFT LPAR */
/* #define HMR_RPAR &hm RCTRL RPAR */
/* #define HMR_LBKT &hm RALT LBKT */
/* #define HMR_RBKT &hm RGUI RBKT */

/* // Home row keys (func) */
/* #define HMF_LPSCRN &hm LGUI PSCRN */
/* #define HMF_F4 &hm LALT F4 */
/* #define HMF_F5 &hm LCTRL F5 */
/* #define HMF_F6 &hm LSHFT F6 */
/* #define HMF_VOL_UP &hm RSHFT K_VOL_UP */
/* #define HMF_VOL_DN &hm RCTRL K_VOL_DN */
/* #define HMF_NEXT &hm RALT K_NEXT */
/* #define HMF_RPSCRN &hm RGUI PSCRN */

&mt {
	tapping-term = <150>;
};

/ {
	behaviors {
		hm: homerow_mods {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_MODS";
		    #binding-cells = <2>;
		    tapping-term-ms = <150>;
		    quick-tap-ms = <0>;
		    flavor = "tap-preferred";
		    bindings = <&kp>, <&kp>;
		};
	};

	keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |   ]  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   |
// |   `  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | CAPS |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  \   |
//                    | TAB | SPC | ENT |   | ESC | BSPC | DEL |
                        bindings = <
   &kp RBKT  &kp Q       &kp W      &kp E       &kp R       &kp T    &kp Y &kp U       &kp I       &kp O      &kp P          &kp LBKT
   &kp GRAVE &hm LGUI A  &hm LALT S &hm LCTRL D &hm LSHFT F &kp G    &kp H &hm RSHFT J &hm RCTRL K &hm RALT L &hm RGUI SEMI  &kp SQT
   &kp CAPS  &kp Z       &kp X      &kp C       &kp V       &kp B    &kp N &kp M       &kp COMMA   &kp DOT    &kp FSLH       &kp BSLH
                         &lt FUNCTIONAL TAB &lt LOWER SPACE &lt RAISE RET   &lt RAISE ESC &lt LOWER BSPC &lt FUNCTIONAL DEL
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |      |  /  |  7  |  8  |  9  |  +  |   |  V+ | MUTE | HOME | PGUP | INS | NEXT |
// |      |  *  |  4  |  5  |  6  |  -  |   | LFT | DWN  |  UP  | RHT  | APP | STOP |
// |      |  0  |  1  |  2  |  3  |  =  |   |  V- | PLAY | END  | PGDN | DEL | PREV |
//                    |     |     |     |   |     |      |      |
                        bindings = <
   &trans &kp FSLH &kp N7 &kp N8 &kp N9 &kp PLUS        &kp K_VOL_UP &kp K_MUTE &kp HOME &kp PG_UP &kp INS &kp K_NEXT
   &trans &hm LGUI ASTRK &hm LALT N4 &hm LCTRL N5 &hm LSHFT N6 &kp MINUS     &kp LEFT     &hm RSHFT DOWN &hm RCTRL UP &hm RALT RIGHT &hm RGUI K_APP &kp K_STOP2
   &trans &kp N0   &kp N1 &kp N2 &kp N3 &kp EQUAL     &kp K_VOL_DN &kp K_PP   &kp END  &kp PG_DN &kp DEL &kp K_PREV
                          &trans &trans &trans        &trans       &trans     &trans
                        >;
                };
                raise_layer {
// -----------------------------------------------------------------------------------------
// |  \  |  /  |  &  |  *  |  (  |  +  |   |  =  |  +  |  :  |  ;  |  |  |  `  |
// |  ,  |  *  |  $  |  %  |  ^  |  -  |   |  -  |  (  |  )  |  [  |  ]  |  '  |
// |  .  |  )  |  !  |  @  |  #  |  =  |   |  _  |  {  |  }  |  <  |  >  |  \  |
//                   |     |     |     |   |     |     |     |
                        bindings = <
   &kp BSLH  &kp FSLH &kp AMPS &kp ASTRK &kp LPAR  &kp PLUS     &kp EQUAL &kp PLUS &kp COLN &kp SEMI &kp PIPE &kp GRAVE
   &kp COMMA &hm LGUI ASTRK &hm LALT DLLR &hm LCTRL PRCNT &hm LSHFT CARET &kp MINUS    &kp MINUS &hm RSHFT LPAR &hm RCTRL RPAR &hm RALT LBKT &hm RGUI RBKT &kp SQT
   &kp DOT   &kp RPAR &kp EXCL &kp AT    &kp HASH  &kp EQUAL    &kp UNDER &kp LBRC &kp RBRC &kp LT   &kp GT   &kp BSLH
                    	       &trans    &trans    &trans       &trans   &trans    &trans
                        >;
                };
                func_layer {
// -----------------------------------------------------------------------------------------
// | BT_CLR | PAUSE |  F7 |  F8 |  F9 |  F10 |   | PLAY |  BR- |  BR+ | BT3  | PAUSE | BT_CLR |
// | BT_NXT | PSCRN |  F4 |  F5 |  F6 |  F11 |   | PREV |  V-  |  V+  | NEXT | PSCRN | BT5 |
// | BT_PRV | SCLK  |  F1 |  F2 |  F3 |  F12 |   | STOP | MUTE |  BT1 | BT2  | SCLK  | BT4 |
//                        |     |     |      |   |      |      |      |
                        bindings = <
   &bt BT_CLR &kp PAUSE_BREAK   &kp F7 &kp F8 &kp F9 &kp F10    &kp K_PP    &kp C_BRI_DN &kp C_BRI_UP &bt BT_SEL 3 &kp PAUSE_BREAK   &bt BT_CLR
   &bt BT_NXT &hm LGUI PSCRN &hm LALT F4 &hm LCTRL F5 &hm LSHFT F6 &kp F11    &kp K_PREV  &hm RSHFT K_VOL_UP &hm RCTRL K_VOL_DN &hm RALT K_NEXT &hm RGUI PSCRN &bt BT_SEL 5
   &bt BT_PRV &kp SLCK   &kp F1 &kp F2 &kp F3 &kp F12    &kp K_STOP2 &kp K_MUTE   &bt BT_SEL 1 &bt BT_SEL 2 &kp SLCK   &bt BT_SEL 4
                    	       &trans    &trans    &trans       &trans   &trans    &trans
                        >;
                };
        };
};
